import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as a,o as r}from"./app-DPetrdGS.js";const i="/Notes/assets/image-CjcnOGll.png",n="/Notes/assets/image-1-57Johtyp.png",p="/Notes/assets/image-2-Cez9kTvW.png",s="/Notes/assets/image-3-BYZ1j7Z6.png",g="/Notes/assets/image-4-DxxWDD3Z.png",c="/Notes/assets/image-5-Ci3F2RoL.png",l="/Notes/assets/image-6-ZMLX54j-.png",m="/Notes/assets/image-7-pcUXZjl4.png",d={};function f(u,t){return r(),o("div",null,t[0]||(t[0]=[a('<h1 id="项目分层" tabindex="-1"><a class="header-anchor" href="#项目分层"><span>项目分层</span></a></h1><blockquote><h2 id="excerpt" tabindex="-1"><a class="header-anchor" href="#excerpt"><span>Excerpt</span></a></h2><p>最开始的时候我推崇 MVC，后来大项目上我比较喜欢「洋葱架构」。一般的项目我还是选用的是 MVC，原因很简…</p></blockquote><hr><p><strong>最开始的时候我推崇<code>MVC</code>，后来大项目上我比较喜欢<code>洋葱架构</code>。</strong></p><p><strong>一般的项目我还是选用的是 MVC，原因很简单就是结构清晰，大家一眼能看懂，不需要培训。</strong></p><p>不过后来随着技术的发展，逐渐接触了：DDD、洋葱架构和六边形架构的分层设计方案。</p><p><strong>1、DDD 领域驱动设计</strong></p><p><strong>DDD</strong>（domain driven design），2003 年提出，是一种为复杂需求开发软件的方法，强调将复杂的业务逻辑放在领域层，通过领域模型来驱动整个应用的设计，也为后续架构模式奠定了理论基础。</p><figure><img src="'+i+'" alt="DDD" tabindex="0" loading="lazy"><figcaption>DDD</figcaption></figure><p><strong>分层目录结构</strong></p><figure><img src="'+n+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p><strong>2、六边形架构</strong></p><p>**六边形架构 (Hexagonal Architecture) ，**也称为端口和适配器架构，由 Alistair Cockburn 于 2005 年提出，它的设计理念就是像六边形那样，把系统核心（业务逻辑）包裹在中间，周围的每个“边”都是一个端口，用来和外界通讯。外部系统要想跟核心打交道，必须通过这些端口来适配。</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>六边形架构将系统分为内部（内部六边形）和外部，内部代表应用的业务逻辑，外部代表应用的驱动逻辑、基础设施或其他应用。内部通过端口和外部系统通信，端口代表了一定协议，以 API 呈现。一个端口可能对应多个外部系统，不同的外部系统需要使用不同的适配器，适配器负责对协议进行转换。这样就使得应用程序能够以一致的方式被用户、程序、自动化测试、批处理脚本所驱动，并且可以在与实际运行的设备和数据库相隔离的情况下进行开发和测试</p><p><strong>分层目录结构</strong></p><figure><img src="'+s+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p><strong>六边形架构核心特点</strong></p><p><strong>1）只有两个世界</strong></p><p>在六边形里面是所有的业务模式/逻辑，外面则是基础设施，也就是代表所有技术规范。两者之间通过端口或适配器组件联系。端口根据调用请求方向又分 API 和 SPI 两种，请求先调用 API 端口，进入领域层核心后，领域模型需要检索数据库或第三方 API 时则是通过 SPI。适配器通过软件技术组件来实现业务领域端口和具体技术之间的适配转换。</p><p><strong>2）依赖关系始终从外部进入内部</strong>，这确保了业务域的隔离，如果以后更改基础架构，业务逻辑将可以重用。</p><p><strong>3、洋葱架构</strong></p><p>**洋葱架构 (Onion Architecture)，**由 Jeffrey Palermo 于 2008 年提出，强调依赖倒置原则，内层不依赖外层，所有依赖都指向内层。</p><figure><img src="'+g+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>洋葱架构在端口和适配器架构的基础上贯彻了将领域放在应用中心，将驱动机制（用户用例）和基础设施（ORM、搜索引擎、第三方 API 等）放在外围的思路。洋葱架构在六边形架构的基础上加入了内部层次。</p><p>洋葱架构与六边形架构有着相同的思路，都是通过编写适配器代码将应用核心从对基础设施的关注中解放出来，避免基础设施代码渗透到应用核心之中。这样应用使用的工具和传达机制都可以轻松地替换，在一定程度上避免技术、工具或者供应商锁定。</p><p><strong>分层目录结构</strong></p><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p><strong>4、三个架构模型对比</strong></p><p>三种模型架构，三种软件层次结构，三种架构已经发展 10 多年了，现在也被普遍应用于很多项目中，每种架构都有着相应的应用场景，选择哪个主要还是根据项目的具体需求。</p><p>现在也有很多人在诋毁这三种架构，诚然很多小的应用随便做做就可以了，不需要具体的分层结构，很多时候一个简单的 MVC 就够，所以具体的应用还是要看场景了。</p><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>三种架构有着不同的应用场景，我用比较多的是「DDD + 洋葱架构」，其他的时候也混着用。</p><p>其实项目开发没必要太拘泥具体的架构，主打的是解决问题。</p><figure><img src="'+m+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>在具体的项目中，「层次混乱」、「交叉依赖」经常是困扰着大家，所以在项目构架设计阶段，团队成员要达成共识，加强培训建立代码规范和审查机制，一定要避免「过度设计」和「接口爆炸」等不利于项目进展的事情，谨记。。。</p>',36)]))}const x=e(d,[["render",f],["__file","项目分层.html.vue"]]),_=JSON.parse('{"path":"/guide/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/%E9%A1%B9%E7%9B%AE%E5%88%86%E5%B1%82.html","title":"项目分层","lang":"zh-CN","frontmatter":{"created":"2025-07-30T10:55:29 (UTC +08:00)","tags":[".NET","ASP.NET","C#",".NET开发",".NET Core"],"source":"https://www.zhihu.com/question/483078208/answer/1933472127018841986?share_code=NMKbZHQmgqEz&utm_psn=1933825948991616009","author":"全小鱼当AI遇到了产品质量安全，会产生什么样的火花呢？ 关注","description":"项目分层 Excerpt 最开始的时候我推崇 MVC，后来大项目上我比较喜欢「洋葱架构」。一般的项目我还是选用的是 MVC，原因很简… 最开始的时候我推崇MVC，后来大项目上我比较喜欢洋葱架构。 一般的项目我还是选用的是 MVC，原因很简单就是结构清晰，大家一眼能看懂，不需要培训。 不过后来随着技术的发展，逐渐接触了：DDD、洋葱架构和六边形架构的分层...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Notes/guide/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/%E9%A1%B9%E7%9B%AE%E5%88%86%E5%B1%82.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"项目分层"}],["meta",{"property":"og:description","content":"项目分层 Excerpt 最开始的时候我推崇 MVC，后来大项目上我比较喜欢「洋葱架构」。一般的项目我还是选用的是 MVC，原因很简… 最开始的时候我推崇MVC，后来大项目上我比较喜欢洋葱架构。 一般的项目我还是选用的是 MVC，原因很简单就是结构清晰，大家一眼能看懂，不需要培训。 不过后来随着技术的发展，逐渐接触了：DDD、洋葱架构和六边形架构的分层..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-30T03:34:48.000Z"}],["meta",{"property":"article:author","content":"全小鱼当AI遇到了产品质量安全，会产生什么样的火花呢？ 关注"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:tag","content":"ASP.NET"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET开发"}],["meta",{"property":"article:tag","content":".NET Core"}],["meta",{"property":"article:modified_time","content":"2025-07-30T03:34:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目分层\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-30T03:34:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全小鱼当AI遇到了产品质量安全，会产生什么样的火花呢？ 关注\\"}]}"]]},"headers":[],"git":{"createdTime":1753845699000,"updatedTime":1753846488000,"contributors":[{"name":"cyoukon","username":"cyoukon","email":"z1162289133@gmail.com","commits":3,"url":"https://github.com/cyoukon"}]},"readingTime":{"minutes":4.52,"words":1357},"filePathRelative":"guide/项目架构/项目分层.md","localizedDate":"2025年7月30日","autoDesc":true}');export{x as comp,_ as data};
